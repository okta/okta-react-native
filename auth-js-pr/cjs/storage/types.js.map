{"version":3,"file":"types.js","names":[],"sources":["../../../lib/storage/types.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { OktaAuthBaseInterface, OktaAuthBaseOptions, OktaAuthOptionsConstructor } from '../base/types';\n\nexport interface CookieOptions {\n  path?: string;\n  secure?: boolean;\n  sessionCookie?: boolean;\n  sameSite?: string | boolean;\n  expires?: Date;\n}\n\nexport interface SetCookieOptions extends CookieOptions {\n  path?: string;\n}\n\nexport interface Cookies {\n  set(name: string, value: string, expiresAt: string, options: SetCookieOptions): string;\n  get(name: string): string;\n  delete(name: string): string;\n}\n\nexport interface SimpleStorage {\n  getItem(key: string): any;\n  setItem(key: string, value: any): void;\n  removeItem?: (key: string) => void;\n}\n\nexport interface StorageProvider extends SimpleStorage {\n  setStorage(obj: any): void;\n  getStorage(): any;\n  clearStorage(key?: string): void;\n  updateStorage(key: string, value: any): void;\n}\n\nexport type StorageType = 'memory' | 'sessionStorage' | 'localStorage' | 'cookie' | 'custom' | 'auto';\n\nexport interface StorageOptions extends CookieOptions {\n  storageType?: StorageType;\n  storageTypes?: StorageType[];\n  storageProvider?: SimpleStorage;\n  storageKey?: string;\n  useSeparateCookies?: boolean;\n}\n\n// for V1 authn interface: tx.resume()\nexport interface TxStorage {\n  get(name: string): string;\n  set(name: string, value: string, expiresAt: string, options: CookieOptions): string;\n  delete(name: string): string;\n}\n\nexport interface StorageUtil {\n  storage: TxStorage;\n  testStorageType(storageType: StorageType): boolean;\n  getStorageByType(storageType: StorageType, options?: StorageOptions): SimpleStorage;\n  findStorageType(types: StorageType[]): StorageType;\n}\n\nexport interface StorageManagerOptions {\n  token?: StorageOptions;\n  transaction?: StorageOptions;\n  [propName: string]: StorageOptions | undefined; // custom sections are allowed\n}\n\nexport interface StorageManagerInterface {\n  getHttpCache(options?: StorageOptions): StorageProvider\n}\n\nexport interface StorageManagerConstructor<I extends StorageManagerInterface> {\n  new(\n    storageManagerOptions: StorageManagerOptions,\n    cookieOptions: CookieOptions,\n    storageUtil: StorageUtil\n  ): I;\n}\n\n// options that can be passed to AuthJS\nexport interface OktaAuthStorageOptions extends OktaAuthBaseOptions {\n  cookies?: CookieOptions;\n  storageUtil?: StorageUtil;\n  storageManager?: StorageManagerOptions;\n}\n\n// a class that constructs options\nexport type OktaAuthStorageOptionsConstructor = OktaAuthOptionsConstructor<OktaAuthStorageOptions>;\n\n// an instance of AuthJS with storage capabilities\nexport interface OktaAuthStorageInterface\n<\n  S extends StorageManagerInterface = StorageManagerInterface,\n  O extends OktaAuthStorageOptions = OktaAuthStorageOptions\n> \n  extends OktaAuthBaseInterface<O>\n{\n  storageManager: S;\n  clearStorage(): void;\n}\n"],"mappings":""}