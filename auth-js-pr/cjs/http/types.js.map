{"version":3,"file":"types.js","names":[],"sources":["../../../lib/http/types.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { OktaUserAgent } from './OktaUserAgent';\nimport {\n  OktaAuthStorageInterface,\n  OktaAuthStorageOptions,\n  StorageManagerInterface,\n  StorageUtil\n} from '../storage/types';\n\nexport type RequestHeaders = Record<string, string>;\n\nexport type RequestData = Record<string, string> | string | object;\n\nexport interface RequestOptions {\n  url?: string;\n  method?: string;\n  args?: RequestData;\n  saveAuthnState?: boolean;\n  accessToken?: string;\n  withCredentials?: boolean;\n  storageUtil?: StorageUtil;\n  cacheResponse?: boolean;\n  headers?: RequestHeaders;\n}\n\nexport interface FetchOptions {\n  headers?: HeadersInit;\n  data?: RequestData;\n  withCredentials?: boolean;\n}\n\nexport interface FetchResponse {\n  headers: {\n    get(key: string): string;\n  };\n  json(): Promise<object>;\n  text(): Promise<string>;\n}\n\nexport type HttpRequestClient = (method: string, url: string, options: FetchOptions) => Promise<any>;\n\nexport interface HttpResponse {\n  responseText: string;\n  status: number;\n  responseType?: string;\n  responseJSON?: {\n    [propName: string]: any;\n  };\n  headers: HeadersInit;\n}\n\n// HTTP API\nexport interface HttpAPI {\n  setRequestHeader(name: string, value: string): void;\n}\n\n// options that can be passed to AuthJS\nexport interface OktaAuthHttpOptions extends OktaAuthStorageOptions \n{\n  issuer?: string;\n  transformErrorXHR?: (xhr: object) => any;\n  headers?: object;\n  httpRequestClient?: HttpRequestClient;\n  httpRequestInterceptors?: ((request: RequestOptions) => void)[];\n}\n\n// an instance of AuthJS with HTTP capabilities\nexport interface OktaAuthHttpInterface\n<\n  S extends StorageManagerInterface = StorageManagerInterface,\n  O extends OktaAuthHttpOptions = OktaAuthHttpOptions,\n> \n  extends OktaAuthStorageInterface<S, O>\n{\n  _oktaUserAgent: OktaUserAgent;\n  http: HttpAPI;\n  \n  setHeaders(headers): void;\n  getIssuerOrigin(): string;\n  webfinger(opts): Promise<object>;\n}\n"],"mappings":""}