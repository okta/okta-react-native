{"version":3,"file":"types.js","names":[],"sources":["../../../lib/authn/types.ts"],"sourcesContent":["import { StorageManagerInterface } from '../storage/types';\nimport { RequestData, RequestOptions, OktaAuthHttpInterface, OktaAuthHttpOptions } from '../http/types';\n\nexport interface AuthnTransactionLink {\n  name?: string;\n  type: string;\n  href: string;\n  hints?: {\n    allow?: string[];\n  };\n}\n\n// Authn V1 transaction\nexport interface AuthnTransactionState {\n  status: string;\n  stateToken?: string;\n  type?: string;\n  expiresAt?: string;\n  relayState?: string;\n  factorResult?: string;\n  factorType?: string;\n  recoveryToken?: string;\n  recoveryType?: string;\n  autoPush?: boolean | (() => boolean);\n  rememberDevice?: boolean | (() => boolean);\n  profile?: {\n    updatePhone?: boolean;\n  };\n  _links?: Record<string, AuthnTransactionLink>;\n}\n\n// eslint-disable-next-line no-use-before-define\nexport type AuthnTransactionFunction = (obj?: any) => Promise<AuthnTransaction>;\n\nexport interface AuthnTransactionFunctions {\n  // common\n  next?: AuthnTransactionFunction;\n  cancel?: AuthnTransactionFunction;\n  skip?: AuthnTransactionFunction;\n  // locked_out\n  unlock?: AuthnTransactionFunction;\n  // password\n  changePassword?: AuthnTransactionFunction;\n  resetPassword?: AuthnTransactionFunction;\n  // recovery\n  answer?: AuthnTransactionFunction;\n  recovery?: AuthnTransactionFunction;\n  // recovery_challenge\n  verify?: AuthnTransactionFunction;\n  resend?: AuthnTransactionFunction;\n  // mfa_enroll_activate\n  activate?: AuthnTransactionFunction;\n  poll?: AuthnTransactionFunction;\n  prev?: AuthnTransactionFunction;\n}\n\nexport interface AuthnTransaction extends AuthnTransactionState, AuthnTransactionFunctions {\n  sessionToken?: string;\n  user?: Record<string, any>;\n  factor?: Record<string, any>;\n  factors?: Array<Record<string, any> >;\n  policy?: Record<string, any>;\n  scopes?: Array<Record<string, any> >;\n  target?: Record<string, any>;\n  authentication?: Record<string, any>;\n}\n\n// Authn (classic) api\nexport interface AuthnTransactionAPI {\n  exists: () => boolean;\n  status: (args?: object) => Promise<object>;\n  resume: (args?: object) => Promise<AuthnTransaction>;\n  introspect: (args?: object) => Promise<AuthnTransaction>;\n  createTransaction: (res?: AuthnTransactionState) => AuthnTransaction;\n  postToTransaction: (url: string, args?: RequestData, options?: RequestOptions) => Promise<AuthnTransaction>;\n}\n\nexport interface SigninOptions {\n  // Only used in Authn V1\n  relayState?: string;\n  context?: {\n    deviceToken?: string;\n  };\n  sendFingerprint?: boolean;\n  stateToken?: string;\n  \n  // Optional credentials\n  username?: string;\n  password?: string;\n}\n\nexport interface SigninWithCredentialsOptions extends SigninOptions {\n  // Required credentials\n  username: string;\n  password: string;\n}\n\nexport interface SigninAPI {\n  signIn(opts: SigninOptions): Promise<AuthnTransaction>;\n  signInWithCredentials(opts: SigninWithCredentialsOptions): Promise<AuthnTransaction>;\n}\n\nexport interface ForgotPasswordOptions {\n  username: string;\n  factorType: 'SMS' | 'EMAIL' | 'CALL';\n  relayState?: string;\n}\n\nexport interface VerifyRecoveryTokenOptions {\n  recoveryToken: string;\n}\n\nexport interface AuthnAPI extends SigninAPI {\n  forgotPassword(opts): Promise<AuthnTransaction>;\n\n  // { username, (relayState) }\n  unlockAccount(opts: ForgotPasswordOptions): Promise<AuthnTransaction>;\n\n  // { recoveryToken }\n  verifyRecoveryToken(opts: VerifyRecoveryTokenOptions): Promise<AuthnTransaction>;\n}\n\n// Fingerprint\nexport interface FingerprintOptions {\n  timeout?: number;\n}\n\nexport type FingerprintAPI = (options?: FingerprintOptions) => Promise<string>;\n\n\nexport interface OktaAuthTxInterface\n<\n  S extends StorageManagerInterface = StorageManagerInterface,\n  O extends OktaAuthHttpOptions = OktaAuthHttpOptions,\n> \n  extends OktaAuthHttpInterface<S, O>, AuthnAPI\n{\n  tx: AuthnTransactionAPI; // legacy name\n  authn: AuthnTransactionAPI; // new name\n  fingerprint: FingerprintAPI;\n\n}\n"],"mappings":""}