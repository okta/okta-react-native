{"version":3,"file":"pkce.js","names":["dec2hex","dec","toString","substr","getRandomString","length","a","Uint8Array","Math","ceil","webcrypto","getRandomValues","str","Array","from","join","slice","generateVerifier","prefix","verifier","MIN_VERIFIER_LENGTH","encodeURIComponent","MAX_VERIFIER_LENGTH","computeChallenge","buffer","TextEncoder","encode","subtle","digest","then","arrayBuffer","hash","String","fromCharCode","apply","b64u","stringToBase64Url","DEFAULT_CODE_CHALLENGE_METHOD"],"sources":["../../../../lib/oidc/util/pkce.ts"],"sourcesContent":["/*!\n * Copyright (c) 2019-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\n /* eslint-disable complexity, max-statements */\nimport { stringToBase64Url, webcrypto } from '../../crypto';\nimport { MIN_VERIFIER_LENGTH, MAX_VERIFIER_LENGTH, DEFAULT_CODE_CHALLENGE_METHOD } from '../../constants';\n\nfunction dec2hex (dec) {\n  return ('0' + dec.toString(16)).substr(-2);\n}\n\nfunction getRandomString(length) {\n  var a = new Uint8Array(Math.ceil(length / 2));\n  webcrypto.getRandomValues(a);\n  var str = Array.from(a, dec2hex).join('');\n  return str.slice(0, length);\n}\n\nfunction generateVerifier(prefix?: string): string {\n  var verifier = prefix || '';\n  if (verifier.length < MIN_VERIFIER_LENGTH) {\n    verifier = verifier + getRandomString(MIN_VERIFIER_LENGTH - verifier.length);\n  }\n  return encodeURIComponent(verifier).slice(0, MAX_VERIFIER_LENGTH);\n}\n\nfunction computeChallenge(str: string): PromiseLike<any> {  \n  var buffer = new TextEncoder().encode(str);\n  return webcrypto.subtle.digest('SHA-256', buffer).then(function(arrayBuffer) {\n    var hash = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer) as unknown as number[]);\n    var b64u = stringToBase64Url(hash); // url-safe base64 variant\n    return b64u;\n  });\n}\n\nexport default {\n  DEFAULT_CODE_CHALLENGE_METHOD,\n  generateVerifier,\n  computeChallenge\n};\n"],"mappings":";;;AAcA;AACA;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC;;AAID,SAASA,OAAO,CAAEC,GAAG,EAAE;EACrB,OAAO,CAAC,GAAG,GAAGA,GAAG,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC5C;AAEA,SAASC,eAAe,CAACC,MAAM,EAAE;EAC/B,IAAIC,CAAC,GAAG,IAAIC,UAAU,CAACC,IAAI,CAACC,IAAI,CAACJ,MAAM,GAAG,CAAC,CAAC,CAAC;EAC7CK,iBAAS,CAACC,eAAe,CAACL,CAAC,CAAC;EAC5B,IAAIM,GAAG,GAAGC,KAAK,CAACC,IAAI,CAACR,CAAC,EAAEN,OAAO,CAAC,CAACe,IAAI,CAAC,EAAE,CAAC;EACzC,OAAOH,GAAG,CAACI,KAAK,CAAC,CAAC,EAAEX,MAAM,CAAC;AAC7B;AAEA,SAASY,gBAAgB,CAACC,MAAe,EAAU;EACjD,IAAIC,QAAQ,GAAGD,MAAM,IAAI,EAAE;EAC3B,IAAIC,QAAQ,CAACd,MAAM,GAAGe,8BAAmB,EAAE;IACzCD,QAAQ,GAAGA,QAAQ,GAAGf,eAAe,CAACgB,8BAAmB,GAAGD,QAAQ,CAACd,MAAM,CAAC;EAC9E;EACA,OAAOgB,kBAAkB,CAACF,QAAQ,CAAC,CAACH,KAAK,CAAC,CAAC,EAAEM,8BAAmB,CAAC;AACnE;AAEA,SAASC,gBAAgB,CAACX,GAAW,EAAoB;EACvD,IAAIY,MAAM,GAAG,IAAIC,WAAW,EAAE,CAACC,MAAM,CAACd,GAAG,CAAC;EAC1C,OAAOF,iBAAS,CAACiB,MAAM,CAACC,MAAM,CAAC,SAAS,EAAEJ,MAAM,CAAC,CAACK,IAAI,CAAC,UAASC,WAAW,EAAE;IAC3E,IAAIC,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAE,IAAI3B,UAAU,CAACuB,WAAW,CAAC,CAAwB;IAC9F,IAAIK,IAAI,GAAG,IAAAC,yBAAiB,EAACL,IAAI,CAAC,CAAC,CAAC;IACpC,OAAOI,IAAI;EACb,CAAC,CAAC;AACJ;AAAC,eAEc;EACbE,6BAA6B,EAA7BA,wCAA6B;EAC7BpB,gBAAgB;EAChBM;AACF,CAAC;AAAA;AAAA"}