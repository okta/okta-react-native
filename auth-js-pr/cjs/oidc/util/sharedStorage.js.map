{"version":3,"file":"sharedStorage.js","names":["MAX_ENTRY_LIFETIME","pruneSharedStorage","storageManager","sharedStorage","getSharedTansactionStorage","entries","getStorage","Object","keys","forEach","state","entry","age","Date","now","dateCreated","setStorage","saveTransactionToSharedStorage","meta","transaction","loadTransactionFromSharedStorage","isTransactionMeta","clearTransactionFromSharedStorage"],"sources":["../../../../lib/oidc/util/sharedStorage.ts"],"sourcesContent":["import { OAuthStorageManagerInterface, OAuthTransactionMeta, isTransactionMeta } from '../types';\n\nconst MAX_ENTRY_LIFETIME = 30 * 60 * 1000; // 30 minutes\n\nexport function pruneSharedStorage<M extends OAuthTransactionMeta>(storageManager: OAuthStorageManagerInterface<M>) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  Object.keys(entries).forEach(state => {\n    const entry = entries[state];\n    const age = Date.now() - entry.dateCreated;\n    if (age > MAX_ENTRY_LIFETIME) {\n      delete entries[state];\n    }\n  });\n  sharedStorage.setStorage(entries);\n}\n\nexport function saveTransactionToSharedStorage<M extends OAuthTransactionMeta>(\n  storageManager: OAuthStorageManagerInterface<M>, state: string, meta: M\n) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  entries[state] = {\n    dateCreated: Date.now(),\n    transaction: meta\n  };\n  sharedStorage.setStorage(entries);\n}\n\n\nexport function loadTransactionFromSharedStorage<M extends OAuthTransactionMeta>(\n  storageManager: OAuthStorageManagerInterface<M>, state: string\n) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  const entry = entries[state];\n  if (entry && entry.transaction && isTransactionMeta(entry.transaction)) {\n    return entry.transaction;\n  }\n  return null;\n}\n\nexport function clearTransactionFromSharedStorage<M extends OAuthTransactionMeta>(\n  storageManager: OAuthStorageManagerInterface<M>, state: string\n) {\n  const sharedStorage = storageManager.getSharedTansactionStorage();\n  const entries = sharedStorage.getStorage();\n  delete entries[state];\n  sharedStorage.setStorage(entries);\n}\n"],"mappings":";;;;;;AAAA;AAEA,MAAMA,kBAAkB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;AAEpC,SAASC,kBAAkB,CAAiCC,cAA+C,EAAE;EAClH,MAAMC,aAAa,GAAGD,cAAc,CAACE,0BAA0B,EAAE;EACjE,MAAMC,OAAO,GAAGF,aAAa,CAACG,UAAU,EAAE;EAC1CC,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACI,OAAO,CAACC,KAAK,IAAI;IACpC,MAAMC,KAAK,GAAGN,OAAO,CAACK,KAAK,CAAC;IAC5B,MAAME,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAGH,KAAK,CAACI,WAAW;IAC1C,IAAIH,GAAG,GAAGZ,kBAAkB,EAAE;MAC5B,OAAOK,OAAO,CAACK,KAAK,CAAC;IACvB;EACF,CAAC,CAAC;EACFP,aAAa,CAACa,UAAU,CAACX,OAAO,CAAC;AACnC;AAEO,SAASY,8BAA8B,CAC5Cf,cAA+C,EAAEQ,KAAa,EAAEQ,IAAO,EACvE;EACA,MAAMf,aAAa,GAAGD,cAAc,CAACE,0BAA0B,EAAE;EACjE,MAAMC,OAAO,GAAGF,aAAa,CAACG,UAAU,EAAE;EAC1CD,OAAO,CAACK,KAAK,CAAC,GAAG;IACfK,WAAW,EAAEF,IAAI,CAACC,GAAG,EAAE;IACvBK,WAAW,EAAED;EACf,CAAC;EACDf,aAAa,CAACa,UAAU,CAACX,OAAO,CAAC;AACnC;AAGO,SAASe,gCAAgC,CAC9ClB,cAA+C,EAAEQ,KAAa,EAC9D;EACA,MAAMP,aAAa,GAAGD,cAAc,CAACE,0BAA0B,EAAE;EACjE,MAAMC,OAAO,GAAGF,aAAa,CAACG,UAAU,EAAE;EAC1C,MAAMK,KAAK,GAAGN,OAAO,CAACK,KAAK,CAAC;EAC5B,IAAIC,KAAK,IAAIA,KAAK,CAACQ,WAAW,IAAI,IAAAE,wBAAiB,EAACV,KAAK,CAACQ,WAAW,CAAC,EAAE;IACtE,OAAOR,KAAK,CAACQ,WAAW;EAC1B;EACA,OAAO,IAAI;AACb;AAEO,SAASG,iCAAiC,CAC/CpB,cAA+C,EAAEQ,KAAa,EAC9D;EACA,MAAMP,aAAa,GAAGD,cAAc,CAACE,0BAA0B,EAAE;EACjE,MAAMC,OAAO,GAAGF,aAAa,CAACG,UAAU,EAAE;EAC1C,OAAOD,OAAO,CAACK,KAAK,CAAC;EACrBP,aAAa,CAACa,UAAU,CAACX,OAAO,CAAC;AACnC"}