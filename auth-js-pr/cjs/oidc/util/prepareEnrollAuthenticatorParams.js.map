{"version":3,"file":"prepareEnrollAuthenticatorParams.js","names":["prepareParams","params","responseType","prompt","maxAge","enrollAmrValues","AuthSdkError","acrValues","scopes","nonce","prepareEnrollAuthenticatorParams","sdk","options","getDefaultEnrollAuthenticatorParams"],"sources":["../../../../lib/oidc/util/prepareEnrollAuthenticatorParams.ts"],"sourcesContent":["/* eslint-disable complexity */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { AuthSdkError } from '../../errors';\nimport { OktaAuthOAuthInterface, EnrollAuthenticatorOptions } from '../types';\nimport { getDefaultEnrollAuthenticatorParams } from './defaultEnrollAuthenticatorParams';\n\nfunction prepareParams(\n  params: EnrollAuthenticatorOptions\n): EnrollAuthenticatorOptions {\n  params = {\n    ...params,\n    // forced params:\n    responseType: 'none',\n    prompt: 'enroll_authenticator',\n    maxAge: 0,\n  };\n\n  if (!params.enrollAmrValues) {\n    throw new AuthSdkError('enroll_amr_values must be specified');\n  }\n  if (!params.acrValues) {\n    // `acr_values` is required and should equal 'urn:okta:2fa:any:ifpossible'\n    // But this can be changed in future\n    throw new AuthSdkError('acr_values must be specified');\n  }\n\n  // `scope`, `nonce` must be omitted\n  delete params.scopes;\n  delete params.nonce;\n\n  return params;\n}\n\n// Prepares params for a call to /authorize\nexport function prepareEnrollAuthenticatorParams(\n  sdk: OktaAuthOAuthInterface,\n  options: EnrollAuthenticatorOptions\n): EnrollAuthenticatorOptions {\n  return prepareParams({\n    ...getDefaultEnrollAuthenticatorParams(sdk),\n    ...options\n  });\n}\n"],"mappings":";;;AAaA;AAEA;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,SAASA,aAAa,CACpBC,MAAkC,EACN;EAC5BA,MAAM,GAAG;IACP,GAAGA,MAAM;IACT;IACAC,YAAY,EAAE,MAAM;IACpBC,MAAM,EAAE,sBAAsB;IAC9BC,MAAM,EAAE;EACV,CAAC;EAED,IAAI,CAACH,MAAM,CAACI,eAAe,EAAE;IAC3B,MAAM,IAAIC,oBAAY,CAAC,qCAAqC,CAAC;EAC/D;EACA,IAAI,CAACL,MAAM,CAACM,SAAS,EAAE;IACrB;IACA;IACA,MAAM,IAAID,oBAAY,CAAC,8BAA8B,CAAC;EACxD;;EAEA;EACA,OAAOL,MAAM,CAACO,MAAM;EACpB,OAAOP,MAAM,CAACQ,KAAK;EAEnB,OAAOR,MAAM;AACf;;AAEA;AACO,SAASS,gCAAgC,CAC9CC,GAA2B,EAC3BC,OAAmC,EACP;EAC5B,OAAOZ,aAAa,CAAC;IACnB,GAAG,IAAAa,qEAAmC,EAACF,GAAG,CAAC;IAC3C,GAAGC;EACL,CAAC,CAAC;AACJ"}