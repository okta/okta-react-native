{"version":3,"file":"api.js","names":[],"sources":["../../../../lib/core/types/api.ts"],"sourcesContent":["import {\n  OAuthStorageManagerInterface,\n  OktaAuthOAuthInterface,\n  OktaAuthOAuthOptions,\n  PKCETransactionMeta,\n  Tokens,\n  TransactionManagerInterface\n} from '../../oidc/types';\n\nimport { ServiceManagerInterface, ServiceManagerOptions } from './Service';\nimport { AuthState, AuthStateManagerInterface } from './AuthState';\n\n\n// options passed to AuthJS constructor\nexport interface OktaAuthCoreOptions extends OktaAuthOAuthOptions\n{\n  services?: ServiceManagerOptions;\n  // eslint-disable-next-line no-use-before-define\n  transformAuthState?: (oktaAuth: OktaAuthCoreInterface, authState: AuthState) => Promise<AuthState>;\n}\n\nexport type CoreStorageManagerInterface<\n  M extends PKCETransactionMeta = PKCETransactionMeta\n> = OAuthStorageManagerInterface<M>;\n\n// an instance of AuthJS with OAuth and Services\nexport interface OktaAuthCoreInterface<\n  M extends PKCETransactionMeta = PKCETransactionMeta,\n  S extends CoreStorageManagerInterface<M> = CoreStorageManagerInterface<M>,\n  O extends OktaAuthCoreOptions = OktaAuthCoreOptions,\n  TM extends TransactionManagerInterface = TransactionManagerInterface\n> \nextends OktaAuthOAuthInterface<M, S, O, TM>\n{\n  serviceManager: ServiceManagerInterface;\n  authStateManager: AuthStateManagerInterface;\n  start(): Promise<void>;\n  stop(): Promise<void>;\n  handleLoginRedirect(tokens?: Tokens, originalUri?: string): Promise<void>;\n  handleRedirect(originalUri?: string): Promise<void>;\n}\n"],"mappings":""}