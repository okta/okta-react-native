{"version":3,"file":"handleInteractionCodeRedirect.js","names":["handleInteractionCodeRedirect","authClient","url","meta","transactionManager","load","AuthSdkError","codeVerifier","state","savedState","searchParams","URL","get","interactionCode","error","OAuthError","tokens","token","exchangeCodeForTokens","tokenManager","setTokens"],"sources":["../../../lib/idx/handleInteractionCodeRedirect.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { AuthSdkError, OAuthError } from '../errors';\nimport { IdxTransactionMeta } from './types/meta';\nimport { OktaAuthIdxInterface } from './types';\n\nexport async function handleInteractionCodeRedirect(\n  authClient: OktaAuthIdxInterface, \n  url: string\n): Promise<void> {\n  const meta = authClient.transactionManager.load() as IdxTransactionMeta;\n  if (!meta) {\n    throw new AuthSdkError('No transaction data was found in storage');\n  }\n\n  const { \n    codeVerifier,\n    state: savedState \n  } = meta;\n  const { \n    searchParams\n  // URL API has been added to the polyfill\n  // eslint-disable-next-line compat/compat\n  } = new URL(url); \n  const state = searchParams.get('state');\n  const interactionCode = searchParams.get('interaction_code');\n\n  // Error handling\n  const error = searchParams.get('error');\n  if (error) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    throw new OAuthError(error, searchParams.get('error_description')!);\n  }\n  if (state !== savedState) {\n    throw new AuthSdkError('State in redirect uri does not match with transaction state');\n  }\n  if (!interactionCode) {\n    throw new AuthSdkError('Unable to parse interaction_code from the url');\n  }\n  \n  // Save tokens to storage\n  const { tokens } = await authClient.token.exchangeCodeForTokens({ interactionCode, codeVerifier });\n  authClient.tokenManager.setTokens(tokens);\n}"],"mappings":";;;AAaA;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOO,eAAeA,6BAA6B,CACjDC,UAAgC,EAChCC,GAAW,EACI;EACf,MAAMC,IAAI,GAAGF,UAAU,CAACG,kBAAkB,CAACC,IAAI,EAAwB;EACvE,IAAI,CAACF,IAAI,EAAE;IACT,MAAM,IAAIG,oBAAY,CAAC,0CAA0C,CAAC;EACpE;EAEA,MAAM;IACJC,YAAY;IACZC,KAAK,EAAEC;EACT,CAAC,GAAGN,IAAI;EACR,MAAM;IACJO;IACF;IACA;EACA,CAAC,GAAG,IAAIC,GAAG,CAACT,GAAG,CAAC;EAChB,MAAMM,KAAK,GAAGE,YAAY,CAACE,GAAG,CAAC,OAAO,CAAC;EACvC,MAAMC,eAAe,GAAGH,YAAY,CAACE,GAAG,CAAC,kBAAkB,CAAC;;EAE5D;EACA,MAAME,KAAK,GAAGJ,YAAY,CAACE,GAAG,CAAC,OAAO,CAAC;EACvC,IAAIE,KAAK,EAAE;IACT;IACA,MAAM,IAAIC,kBAAU,CAACD,KAAK,EAAEJ,YAAY,CAACE,GAAG,CAAC,mBAAmB,CAAC,CAAE;EACrE;EACA,IAAIJ,KAAK,KAAKC,UAAU,EAAE;IACxB,MAAM,IAAIH,oBAAY,CAAC,6DAA6D,CAAC;EACvF;EACA,IAAI,CAACO,eAAe,EAAE;IACpB,MAAM,IAAIP,oBAAY,CAAC,+CAA+C,CAAC;EACzE;;EAEA;EACA,MAAM;IAAEU;EAAO,CAAC,GAAG,MAAMf,UAAU,CAACgB,KAAK,CAACC,qBAAqB,CAAC;IAAEL,eAAe;IAAEN;EAAa,CAAC,CAAC;EAClGN,UAAU,CAACkB,YAAY,CAACC,SAAS,CAACJ,MAAM,CAAC;AAC3C"}