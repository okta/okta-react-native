{"version":3,"file":"remediate.js","names":["getActionFromValues","values","idxResponse","Object","keys","actions","find","action","resend","includes","removeActionFromValues","undefined","removeActionFromOptions","options","actionName","filter","entry","name","remediate","authClient","neededToProceed","interactionCode","flow","remediator","getRemediator","actionFromValues","actionFromOptions","params","valuesWithoutExecutedAction","optionsWithoutExecutedAction","requestDidSucceed","handleFailedResponse","canceled","remediationAction","proceed","terminal","isTerminalResponse","step","filterValuesForRemediation","AuthSdkError","reduce","acc","curr","canRemediate","nextStep","getNextStep","getName","data","getData","getValuesAfterProceed","useGenericRemediator","gr"],"sources":["../../../lib/idx/remediate.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n/* eslint-disable max-statements, max-depth, complexity */\nimport { AuthSdkError } from '../errors';\nimport { RemediationValues } from './remediators';\nimport { OktaAuthIdxInterface, RemediateOptions, RemediationResponse } from './types';\nimport { \n  IdxResponse,\n  IdxActionParams, \n} from './types/idx-js';\nimport {\n  isTerminalResponse,\n  filterValuesForRemediation,\n  getRemediator,\n  getNextStep,\n  handleFailedResponse\n} from './util';\n\nexport interface RemediateActionWithOptionalParams {\n  name: string;\n  params?: IdxActionParams;\n}\n\nexport type RemediateAction = string | RemediateActionWithOptionalParams;\n\n\nfunction getActionFromValues(values: RemediationValues, idxResponse: IdxResponse): string | undefined {\n  // Currently support resend actions only\n  return Object.keys(idxResponse.actions).find(action => !!values.resend && action.includes('-resend'));\n}\n\nfunction removeActionFromValues(values: RemediationValues): RemediationValues {\n  // Currently support resend actions only\n  return {\n    ...values,\n    resend: undefined\n  };\n}\n\nfunction removeActionFromOptions(options: RemediateOptions, actionName: string): RemediateOptions {\n  let actions = options.actions || [];\n  actions = actions.filter(entry => {\n    if (typeof entry === 'string') {\n      return entry !== actionName;\n    }\n    return entry.name !== actionName;\n  });\n\n  return { ...options, actions };\n}\n\n// This function is called recursively until it reaches success or cannot be remediated\nexport async function remediate(\n  authClient: OktaAuthIdxInterface,\n  idxResponse: IdxResponse,\n  values: RemediationValues,\n  options: RemediateOptions\n): Promise<RemediationResponse> {\n  let { neededToProceed, interactionCode } = idxResponse;\n  const { flow } = options;\n\n  // If the response contains an interaction code, there is no need to remediate\n  if (interactionCode) {\n    return { idxResponse };\n  }\n\n  const remediator = getRemediator(neededToProceed, values, options);\n\n  // Try actions in idxResponse first\n  const actionFromValues = getActionFromValues(values, idxResponse);\n  const actionFromOptions = options.actions || [];\n  const actions = [\n    ...actionFromOptions,\n    ...(actionFromValues && [actionFromValues] || []),\n  ];\n  if (actions) {\n    for (let action of actions) {\n      // Action can either be specified as a string, or as an object with name and optional params\n      let params: IdxActionParams = {};\n      if (typeof action !== 'string') {\n        params = action.params || {};\n        action = action.name;\n      }\n      let valuesWithoutExecutedAction = removeActionFromValues(values);\n      let optionsWithoutExecutedAction = removeActionFromOptions(options, action);\n\n      if (typeof idxResponse.actions[action] === 'function') {\n        idxResponse = await idxResponse.actions[action](params);\n        if (idxResponse.requestDidSucceed === false) {\n          return handleFailedResponse(authClient, idxResponse, options);\n        }\n        if (action === 'cancel') {\n          return { idxResponse, canceled: true };\n        }\n        return remediate(\n          authClient, \n          idxResponse, \n          valuesWithoutExecutedAction, \n          optionsWithoutExecutedAction\n        ); // recursive call\n      }\n\n      // search for action in remediation list\n      const remediationAction = neededToProceed.find(({ name }) => name === action);\n      if (remediationAction) {\n        idxResponse = await idxResponse.proceed(action, params);\n        if (idxResponse.requestDidSucceed === false) {\n          return handleFailedResponse(authClient, idxResponse, options);\n        }\n        return remediate(authClient, idxResponse, values, optionsWithoutExecutedAction); // recursive call\n      }\n    }\n  }\n\n  // Do not attempt to remediate if response is in terminal state\n  const terminal = isTerminalResponse(idxResponse);\n  if (terminal) {\n    return { idxResponse, terminal };\n  }\n\n  if (!remediator) {\n    // With options.step, remediator is not required\n    if (options.step) {\n      values = filterValuesForRemediation(idxResponse, options.step, values); // include only requested values\n      idxResponse = await idxResponse.proceed(options.step, values);\n      if (idxResponse.requestDidSucceed === false) {\n        return handleFailedResponse(authClient, idxResponse, options);\n      }\n      return { idxResponse };\n    }\n\n    // With default flow, remediator is not required\n    if (flow === 'default') {\n      return { idxResponse };\n    }\n    throw new AuthSdkError(`\n      No remediation can match current flow, check policy settings in your org.\n      Remediations: [${neededToProceed.reduce((acc, curr) => acc ? acc + ' ,' + curr.name : curr.name, '')}]\n    `);\n  }\n\n  // Return next step to the caller\n  if (!remediator.canRemediate()) {\n    const nextStep = getNextStep(authClient, remediator, idxResponse);\n    return {\n      idxResponse,\n      nextStep,\n    };\n  }\n\n  const name = remediator.getName();\n  const data = remediator.getData();\n\n  idxResponse = await idxResponse.proceed(name, data);\n  if (idxResponse.requestDidSucceed === false) {\n    return handleFailedResponse(authClient, idxResponse, options);\n  }\n  // We may want to trim the values bag for the next remediation\n  // Let the remediator decide what the values should be (default to current values)\n  values = remediator.getValuesAfterProceed();\n  options = { ...options, step: undefined }; // do not re-use the step\n\n  // generic remediator should not auto proceed in pending status\n  // return nextStep directly\n  if (options.useGenericRemediator && !idxResponse.interactionCode && !isTerminalResponse(idxResponse)) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const gr = getRemediator(idxResponse.neededToProceed, values, options)!;\n    const nextStep = getNextStep(authClient, gr, idxResponse);\n    return {\n      idxResponse,\n      nextStep,\n    };\n  }\n  \n  return remediate(authClient, idxResponse, values, options); // recursive call\n\n}\n"],"mappings":"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"}