{"version":3,"file":"SelectAuthenticatorAuthenticate.js","names":["SelectAuthenticatorAuthenticate","SelectAuthenticator","constructor","remediation","values","options","isRecoveryFlow","flow","hasPasswordInOptions","getAuthenticatorFromRemediation","some","relatesTo","key","AuthenticatorKey","OKTA_PASSWORD","password","authenticators"],"sources":["../../../../lib/idx/remediators/SelectAuthenticatorAuthenticate.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { SelectAuthenticator, SelectAuthenticatorValues } from './Base/SelectAuthenticator';\nimport { getAuthenticatorFromRemediation } from './util';\nimport { IdxRemediation } from '../types/idx-js';\nimport { AuthenticatorKey, Authenticator, RemediateOptions } from '../types';\n\nexport type SelectAuthenticatorAuthenticateValues = SelectAuthenticatorValues & {\n  password?: string;\n};\n\nexport class SelectAuthenticatorAuthenticate extends SelectAuthenticator<SelectAuthenticatorAuthenticateValues> {\n  static remediationName = 'select-authenticator-authenticate';\n\n  constructor(\n    remediation: IdxRemediation, \n    values: SelectAuthenticatorValues = {}, \n    options: RemediateOptions = {}\n  ) {\n    super(remediation, values, options);\n\n    // Preset password authenticator to trigger recover action\n    const isRecoveryFlow = this.options.flow === 'recoverPassword';\n    const hasPasswordInOptions = getAuthenticatorFromRemediation(remediation)\n      .options?.some(({ relatesTo }) => relatesTo?.key === AuthenticatorKey.OKTA_PASSWORD);\n    if (hasPasswordInOptions && (isRecoveryFlow || this.values.password)) {\n      this.values.authenticators = [\n        ...this.values.authenticators || [],\n        { key: AuthenticatorKey.OKTA_PASSWORD }\n      ] as Authenticator[];\n    }\n  }\n}\n"],"mappings":";;;;;AAaA;AACA;AAEA;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYO,MAAMA,+BAA+B,SAASC,wCAAmB,CAAwC;EAG9GC,WAAW,CACTC,WAA2B,EAC3BC,MAAiC,GAAG,CAAC,CAAC,EACtCC,OAAyB,GAAG,CAAC,CAAC,EAC9B;IAAA;IACA,KAAK,CAACF,WAAW,EAAEC,MAAM,EAAEC,OAAO,CAAC;;IAEnC;IACA,MAAMC,cAAc,GAAG,IAAI,CAACD,OAAO,CAACE,IAAI,KAAK,iBAAiB;IAC9D,MAAMC,oBAAoB,4BAAG,IAAAC,qCAA+B,EAACN,WAAW,CAAC,CACtEE,OAAO,0DADmB,sBACjBK,IAAI,CAAC,CAAC;MAAEC;IAAU,CAAC,KAAK,CAAAA,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEC,GAAG,MAAKC,uBAAgB,CAACC,aAAa,CAAC;IACtF,IAAIN,oBAAoB,KAAKF,cAAc,IAAI,IAAI,CAACF,MAAM,CAACW,QAAQ,CAAC,EAAE;MACpE,IAAI,CAACX,MAAM,CAACY,cAAc,GAAG,CAC3B,IAAG,IAAI,CAACZ,MAAM,CAACY,cAAc,IAAI,EAAE,GACnC;QAAEJ,GAAG,EAAEC,uBAAgB,CAACC;MAAc,CAAC,CACrB;IACtB;EACF;AACF;AAAC;AAAA,8BArBYd,+BAA+B,qBACjB,mCAAmC"}