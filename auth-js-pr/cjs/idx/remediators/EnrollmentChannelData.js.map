{"version":3,"file":"EnrollmentChannelData.js","names":["EnrollmentChannelData","Remediator","getInputEmail","name","type","required","label","getInputPhoneNumber","canRemediate","Boolean","values","email","phoneNumber","getNextStep","authClient","context","common","authenticator","currentAuthenticator","value","getData","stateHandle","getValuesAfterProceed","trimmedValues","Object","keys","filter","valueKey","includes","reduce"],"sources":["../../../../lib/idx/remediators/EnrollmentChannelData.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Base/Remediator';\nimport { IdxContext } from '../types/idx-js';\nimport { OktaAuthIdxInterface } from '../types';\n\n\nexport type EnrollmentChannelDataValues = RemediationValues & {\n  email?: string;\n  phoneNumber?: string;\n};\n\nexport class EnrollmentChannelData extends Remediator<EnrollmentChannelDataValues> {\n  static remediationName = 'enrollment-channel-data';\n\n  getInputEmail() {\n    return [\n      { name: 'email', type: 'string', required: true, label: 'Email' },\n    ];\n  }\n\n  getInputPhoneNumber() {\n    return [\n      { name: 'phoneNumber', type: 'string', required: true, label: 'Phone Number' },\n    ];\n  }\n\n  canRemediate() {\n    return Boolean(this.values.email || this.values.phoneNumber);\n  }\n\n  getNextStep(authClient: OktaAuthIdxInterface, context: IdxContext) {\n    const common = super.getNextStep(authClient, context);\n    const authenticator = context.currentAuthenticator.value;\n    return {\n      ...common,\n      authenticator,\n    };\n  }\n\n  getData() {\n    return {\n      stateHandle: this.values.stateHandle,\n      email: this.values.email,\n      phoneNumber: this.values.phoneNumber\n    };\n  }\n\n  getValuesAfterProceed(): EnrollmentChannelDataValues {\n    let trimmedValues = Object.keys(this.values).filter(valueKey => !['email', 'phoneNumber'].includes(valueKey));\n    return trimmedValues.reduce((values, valueKey) => ({...values, [valueKey]: this.values[valueKey]}), {});\n  }\n}\n"],"mappings":";;;;;AAaA;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaO,MAAMA,qBAAqB,SAASC,sBAAU,CAA8B;EAGjFC,aAAa,GAAG;IACd,OAAO,CACL;MAAEC,IAAI,EAAE,OAAO;MAAEC,IAAI,EAAE,QAAQ;MAAEC,QAAQ,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAQ,CAAC,CAClE;EACH;EAEAC,mBAAmB,GAAG;IACpB,OAAO,CACL;MAAEJ,IAAI,EAAE,aAAa;MAAEC,IAAI,EAAE,QAAQ;MAAEC,QAAQ,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAe,CAAC,CAC/E;EACH;EAEAE,YAAY,GAAG;IACb,OAAOC,OAAO,CAAC,IAAI,CAACC,MAAM,CAACC,KAAK,IAAI,IAAI,CAACD,MAAM,CAACE,WAAW,CAAC;EAC9D;EAEAC,WAAW,CAACC,UAAgC,EAAEC,OAAmB,EAAE;IACjE,MAAMC,MAAM,GAAG,KAAK,CAACH,WAAW,CAACC,UAAU,EAAEC,OAAO,CAAC;IACrD,MAAME,aAAa,GAAGF,OAAO,CAACG,oBAAoB,CAACC,KAAK;IACxD,OAAO;MACL,GAAGH,MAAM;MACTC;IACF,CAAC;EACH;EAEAG,OAAO,GAAG;IACR,OAAO;MACLC,WAAW,EAAE,IAAI,CAACX,MAAM,CAACW,WAAW;MACpCV,KAAK,EAAE,IAAI,CAACD,MAAM,CAACC,KAAK;MACxBC,WAAW,EAAE,IAAI,CAACF,MAAM,CAACE;IAC3B,CAAC;EACH;EAEAU,qBAAqB,GAAgC;IACnD,IAAIC,aAAa,GAAGC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACf,MAAM,CAAC,CAACgB,MAAM,CAACC,QAAQ,IAAI,CAAC,CAAC,OAAO,EAAE,aAAa,CAAC,CAACC,QAAQ,CAACD,QAAQ,CAAC,CAAC;IAC7G,OAAOJ,aAAa,CAACM,MAAM,CAAC,CAACnB,MAAM,EAAEiB,QAAQ,MAAM;MAAC,GAAGjB,MAAM;MAAE,CAACiB,QAAQ,GAAG,IAAI,CAACjB,MAAM,CAACiB,QAAQ;IAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACzG;AACF;AAAC;AAAA,8BAxCY3B,qBAAqB,qBACP,yBAAyB"}