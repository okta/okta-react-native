{"version":3,"file":"AuthenticatorVerificationData.js","names":["AuthenticatorVerificationData","AuthenticatorData","mapAuthenticator","getAuthenticatorData","getInputAuthenticator","authenticator","getAuthenticatorFromRemediation","methodType","form","value","find","name","options","type","required","inputs","getValuesAfterProceed","values","trimmedValues","Object","keys","filter","valueKey","reduce"],"sources":["../../../../lib/idx/remediators/AuthenticatorVerificationData.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { AuthenticatorData, AuthenticatorDataValues } from './Base/AuthenticatorData';\n\nexport type AuthenticatorVerificationDataValues = AuthenticatorDataValues;\n\nexport class AuthenticatorVerificationData extends AuthenticatorData<AuthenticatorVerificationDataValues> {\n  static remediationName = 'authenticator-verification-data';\n\n  mapAuthenticator() {\n    return this.getAuthenticatorData();\n  }\n\n  getInputAuthenticator() {\n    const authenticator = this.getAuthenticatorFromRemediation();\n    const methodType = authenticator.form!.value.find(({ name }) => name === 'methodType');\n    // if has methodType in form, let user select the methodType\n    if (methodType && methodType.options) {\n      return { \n        name: 'methodType', \n        type: 'string', \n        required: true, \n        options: methodType.options \n      };\n    }\n    // no methodType, then return form values\n    const inputs = [...authenticator.form!.value];\n    return inputs;\n  }\n\n  getValuesAfterProceed(): AuthenticatorVerificationDataValues {\n    this.values = super.getValuesAfterProceed();\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'authenticator');\n    return trimmedValues.reduce((values, valueKey) => ({...values, [valueKey]: this.values[valueKey]}), {});\n  }\n}\n"],"mappings":";;;;;AAaA;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMO,MAAMA,6BAA6B,SAASC,oCAAiB,CAAsC;EAGxGC,gBAAgB,GAAG;IACjB,OAAO,IAAI,CAACC,oBAAoB,EAAE;EACpC;EAEAC,qBAAqB,GAAG;IACtB,MAAMC,aAAa,GAAG,IAAI,CAACC,+BAA+B,EAAE;IAC5D,MAAMC,UAAU,GAAGF,aAAa,CAACG,IAAI,CAAEC,KAAK,CAACC,IAAI,CAAC,CAAC;MAAEC;IAAK,CAAC,KAAKA,IAAI,KAAK,YAAY,CAAC;IACtF;IACA,IAAIJ,UAAU,IAAIA,UAAU,CAACK,OAAO,EAAE;MACpC,OAAO;QACLD,IAAI,EAAE,YAAY;QAClBE,IAAI,EAAE,QAAQ;QACdC,QAAQ,EAAE,IAAI;QACdF,OAAO,EAAEL,UAAU,CAACK;MACtB,CAAC;IACH;IACA;IACA,MAAMG,MAAM,GAAG,CAAC,GAAGV,aAAa,CAACG,IAAI,CAAEC,KAAK,CAAC;IAC7C,OAAOM,MAAM;EACf;EAEAC,qBAAqB,GAAwC;IAC3D,IAAI,CAACC,MAAM,GAAG,KAAK,CAACD,qBAAqB,EAAE;IAC3C,IAAIE,aAAa,GAAGC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACH,MAAM,CAAC,CAACI,MAAM,CAACC,QAAQ,IAAIA,QAAQ,KAAK,eAAe,CAAC;IAC7F,OAAOJ,aAAa,CAACK,MAAM,CAAC,CAACN,MAAM,EAAEK,QAAQ,MAAM;MAAC,GAAGL,MAAM;MAAE,CAACK,QAAQ,GAAG,IAAI,CAACL,MAAM,CAACK,QAAQ;IAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACzG;AACF;AAAC;AAAA,8BA7BYtB,6BAA6B,qBACf,iCAAiC"}