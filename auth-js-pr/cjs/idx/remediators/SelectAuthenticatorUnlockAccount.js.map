{"version":3,"file":"SelectAuthenticatorUnlockAccount.js","names":["SelectAuthenticatorUnlockAccount","SelectAuthenticator","identifier","canRemediate","getData","mapAuthenticator","remediationValue","authenticatorMap","methodTypeOption","selectedOption","value","form","find","name","methodTypeValue","values","methodType","options","getInputUsername","type"],"sources":["../../../../lib/idx/remediators/SelectAuthenticatorUnlockAccount.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { SelectAuthenticator, SelectAuthenticatorValues } from './Base/SelectAuthenticator';\nimport { Authenticator } from '../types';\nimport { IdxRemediationValue } from '../types/idx-js';\n\n\nexport type SelectAuthenticatorUnlockAccountValues = SelectAuthenticatorValues & {\n  identifier?: string;\n  methodType?: string;\n};\n\nexport class SelectAuthenticatorUnlockAccount extends SelectAuthenticator<SelectAuthenticatorUnlockAccountValues> {\n  static remediationName = 'select-authenticator-unlock-account';\n  authenticator?: Authenticator;\n\n  map = {\n    identifier: ['username']\n  };\n\n  canRemediate() {\n    const identifier = this.getData('identifier');\n    return !!identifier && super.canRemediate();\n  }\n\n  mapAuthenticator(remediationValue: IdxRemediationValue) {\n    const authenticatorMap = super.mapAuthenticator(remediationValue);\n    const methodTypeOption = this.selectedOption?.value.form.value.find(({ name }) => name === 'methodType');\n\n    // defaults to 'manually defined' value\n    // 2nd: option may have pre-defined value, like stateHandle\n    // 3rd: if only a single OV option is available, default to that option\n    const methodTypeValue = this.values.methodType ||\n      methodTypeOption?.value as string || methodTypeOption?.options?.[0]?.value as string;\n\n    if (methodTypeValue) {\n      return {\n        ...authenticatorMap,\n        methodType: methodTypeValue\n      };\n    }\n\n    return authenticatorMap;\n  }\n\n  getInputUsername () {\n    return { name: 'username', type: 'string' };\n  }\n\n}\n"],"mappings":";;;;;AAaA;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaO,MAAMA,gCAAgC,SAASC,wCAAmB,CAAyC;EAAA;IAAA;IAAA,2CAI1G;MACJC,UAAU,EAAE,CAAC,UAAU;IACzB,CAAC;EAAA;EAEDC,YAAY,GAAG;IACb,MAAMD,UAAU,GAAG,IAAI,CAACE,OAAO,CAAC,YAAY,CAAC;IAC7C,OAAO,CAAC,CAACF,UAAU,IAAI,KAAK,CAACC,YAAY,EAAE;EAC7C;EAEAE,gBAAgB,CAACC,gBAAqC,EAAE;IAAA;IACtD,MAAMC,gBAAgB,GAAG,KAAK,CAACF,gBAAgB,CAACC,gBAAgB,CAAC;IACjE,MAAME,gBAAgB,2BAAG,IAAI,CAACC,cAAc,yDAAnB,qBAAqBC,KAAK,CAACC,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC,CAAC;MAAEC;IAAK,CAAC,KAAKA,IAAI,KAAK,YAAY,CAAC;;IAExG;IACA;IACA;IACA,MAAMC,eAAe,GAAG,IAAI,CAACC,MAAM,CAACC,UAAU,KAC5CR,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEE,KAAK,CAAU,KAAIF,gBAAgB,aAAhBA,gBAAgB,gDAAhBA,gBAAgB,CAAES,OAAO,oFAAzB,sBAA4B,CAAC,CAAC,2DAA9B,uBAAgCP,KAAK,CAAU;IAEtF,IAAII,eAAe,EAAE;MACnB,OAAO;QACL,GAAGP,gBAAgB;QACnBS,UAAU,EAAEF;MACd,CAAC;IACH;IAEA,OAAOP,gBAAgB;EACzB;EAEAW,gBAAgB,GAAI;IAClB,OAAO;MAAEL,IAAI,EAAE,UAAU;MAAEM,IAAI,EAAE;IAAS,CAAC;EAC7C;AAEF;AAAC;AAAA,8BArCYnB,gCAAgC,qBAClB,qCAAqC"}