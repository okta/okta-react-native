{"version":3,"file":"introspect.js","names":["introspect","authClient","options","rawIdxResponse","requestDidSucceed","savedIdxResponse","transactionManager","loadIdxResponse","version","IDX_API_VERSION","domain","getOAuthDomain","interactionHandle","stateHandle","withCredentials","validateVersionConfig","url","body","stateToken","headers","Accept","httpRequest","method","args","err","isAuthApiError","xhr","isRawIdxResponse","responseJSON","makeIdxState"],"sources":["../../../lib/idx/introspect.ts"],"sourcesContent":["/* eslint-disable complexity */\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { makeIdxState, validateVersionConfig } from './idxState';\nimport { IntrospectOptions, OktaAuthIdxInterface } from './types';\nimport { IdxResponse, isRawIdxResponse } from './types/idx-js';\nimport { getOAuthDomain } from '../oidc';\nimport { IDX_API_VERSION } from '../constants';\nimport { httpRequest } from '../http';\nimport { isAuthApiError } from '../errors';\n\nexport async function introspect (\n  authClient: OktaAuthIdxInterface, \n  options: IntrospectOptions = {}\n): Promise<IdxResponse> {\n  let rawIdxResponse;\n  let requestDidSucceed;\n\n  // try load from storage first\n  const savedIdxResponse = authClient.transactionManager.loadIdxResponse(options);\n  if (savedIdxResponse) {\n    rawIdxResponse = savedIdxResponse.rawIdxResponse;\n    requestDidSucceed = savedIdxResponse.requestDidSucceed;\n  }\n\n  // call idx.introspect if no existing idx response available in storage\n  if (!rawIdxResponse) {\n    const version = options.version || IDX_API_VERSION;\n    const domain = getOAuthDomain(authClient);\n    const { interactionHandle, stateHandle } = options;\n    const withCredentials = options.withCredentials ?? true;\n    try {\n      requestDidSucceed = true;\n      validateVersionConfig(version);\n      const url = `${domain}/idp/idx/introspect`;\n      const body = stateHandle ? { stateToken: stateHandle } : { interactionHandle };\n      const headers = {\n        'Content-Type': `application/ion+json; okta-version=${version}`, // Server wants this version info\n        Accept: `application/ion+json; okta-version=${version}`,\n      };\n      rawIdxResponse = await httpRequest(authClient, {\n        method: 'POST',\n        url,\n        headers,\n        withCredentials,\n        args: body\n      });\n    } catch (err) {\n      if (isAuthApiError(err) && err.xhr && isRawIdxResponse(err.xhr.responseJSON)) {\n        rawIdxResponse = err.xhr.responseJSON;\n        requestDidSucceed = false;\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  const { withCredentials } = options;\n  return makeIdxState(authClient, rawIdxResponse, { withCredentials }, requestDidSucceed);\n}\n"],"mappings":";;;AAaA;AAEA;AACA;AACA;AACA;AACA;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUO,eAAeA,UAAU,CAC9BC,UAAgC,EAChCC,OAA0B,GAAG,CAAC,CAAC,EACT;EACtB,IAAIC,cAAc;EAClB,IAAIC,iBAAiB;;EAErB;EACA,MAAMC,gBAAgB,GAAGJ,UAAU,CAACK,kBAAkB,CAACC,eAAe,CAACL,OAAO,CAAC;EAC/E,IAAIG,gBAAgB,EAAE;IACpBF,cAAc,GAAGE,gBAAgB,CAACF,cAAc;IAChDC,iBAAiB,GAAGC,gBAAgB,CAACD,iBAAiB;EACxD;;EAEA;EACA,IAAI,CAACD,cAAc,EAAE;IACnB,MAAMK,OAAO,GAAGN,OAAO,CAACM,OAAO,IAAIC,0BAAe;IAClD,MAAMC,MAAM,GAAG,IAAAC,oBAAc,EAACV,UAAU,CAAC;IACzC,MAAM;MAAEW,iBAAiB;MAAEC;IAAY,CAAC,GAAGX,OAAO;IAClD,MAAMY,eAAe,GAAGZ,OAAO,CAACY,eAAe,IAAI,IAAI;IACvD,IAAI;MACFV,iBAAiB,GAAG,IAAI;MACxB,IAAAW,+BAAqB,EAACP,OAAO,CAAC;MAC9B,MAAMQ,GAAG,GAAI,GAAEN,MAAO,qBAAoB;MAC1C,MAAMO,IAAI,GAAGJ,WAAW,GAAG;QAAEK,UAAU,EAAEL;MAAY,CAAC,GAAG;QAAED;MAAkB,CAAC;MAC9E,MAAMO,OAAO,GAAG;QACd,cAAc,EAAG,sCAAqCX,OAAQ,EAAC;QAAE;QACjEY,MAAM,EAAG,sCAAqCZ,OAAQ;MACxD,CAAC;MACDL,cAAc,GAAG,MAAM,IAAAkB,iBAAW,EAACpB,UAAU,EAAE;QAC7CqB,MAAM,EAAE,MAAM;QACdN,GAAG;QACHG,OAAO;QACPL,eAAe;QACfS,IAAI,EAAEN;MACR,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZ,IAAI,IAAAC,sBAAc,EAACD,GAAG,CAAC,IAAIA,GAAG,CAACE,GAAG,IAAI,IAAAC,uBAAgB,EAACH,GAAG,CAACE,GAAG,CAACE,YAAY,CAAC,EAAE;QAC5EzB,cAAc,GAAGqB,GAAG,CAACE,GAAG,CAACE,YAAY;QACrCxB,iBAAiB,GAAG,KAAK;MAC3B,CAAC,MAAM;QACL,MAAMoB,GAAG;MACX;IACF;EACF;EAEA,MAAM;IAAEV;EAAgB,CAAC,GAAGZ,OAAO;EACnC,OAAO,IAAA2B,sBAAY,EAAC5B,UAAU,EAAEE,cAAc,EAAE;IAAEW;EAAgB,CAAC,EAAEV,iBAAiB,CAAC;AACzF"}