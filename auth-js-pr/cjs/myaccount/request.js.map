{"version":3,"file":"request.js","names":["sendRequest","oktaAuth","options","accessToken","accessTokenObj","tokenManager","getTokensSync","issuer","getIssuerOrigin","url","method","payload","requestUrl","startsWith","AuthSdkError","res","httpRequest","headers","args","map","EmailTransaction","EmailStatusTransaction","EmailChallengeTransaction","ProfileTransaction","ProfileSchemaTransaction","PhoneTransaction","PasswordTransaction","TransactionClass","transactionClassName","BaseTransaction","Array","isArray","item","generateRequestFnFromLinks","methodName","links","toLowerCase","link","self","href","hints","allow"],"sources":["../../../lib/myaccount/request.ts"],"sourcesContent":["import { \n  BaseTransaction,\n  EmailTransaction,\n  EmailStatusTransaction,\n  EmailChallengeTransaction,\n  ProfileTransaction,\n  ProfileSchemaTransaction,\n  PhoneTransaction,\n  PasswordTransaction\n} from './transactions';\nimport { httpRequest } from '../http';\nimport { AuthSdkError } from '../errors';\nimport { MyAccountRequestOptions as RequestOptions } from './types';\nimport { OktaAuthOAuthInterface } from '../oidc/types';\n\nexport type TransactionLink = {\n  href: string;\n  hints?: {\n    allow?: string[];\n  };\n}\n\ntype TransactionLinks = {\n  self: TransactionLink;\n  [property: string]: TransactionLink;\n}\n\ntype SendRequestOptions = RequestOptions & {\n  url: string;\n  method: string;\n  transactionClassName?: string;\n}\n\n/* eslint-disable complexity */\nexport async function sendRequest<T extends BaseTransaction> (\n  oktaAuth: OktaAuthOAuthInterface, \n  options: SendRequestOptions\n): Promise<T | T[]> {\n  const { \n    accessToken: accessTokenObj\n  } = oktaAuth.tokenManager.getTokensSync();\n  \n  const accessToken = options.accessToken || accessTokenObj?.accessToken;\n  const issuer = oktaAuth.getIssuerOrigin();\n  const { url, method, payload } = options;\n  const requestUrl = url.startsWith(issuer!) ? url : `${issuer}${url}`;\n\n  if (!accessToken) {\n    throw new AuthSdkError('AccessToken is required to request MyAccount API endpoints.');\n  }\n  \n  const res = await httpRequest(oktaAuth, {\n    headers: { 'Accept': '*/*;okta-version=1.0.0' },\n    accessToken,\n    url: requestUrl,\n    method,\n    ...(payload && { args: payload })\n  });\n\n  const map = {\n    EmailTransaction,\n    EmailStatusTransaction,\n    EmailChallengeTransaction,\n    ProfileTransaction,\n    ProfileSchemaTransaction,\n    PhoneTransaction,\n    PasswordTransaction\n  };\n  const TransactionClass = map[options.transactionClassName!] || BaseTransaction;\n\n  if (Array.isArray(res)) {\n    return res.map(item => new TransactionClass(oktaAuth, { \n      res: item, \n      accessToken\n    }));\n  }\n\n  return new TransactionClass(oktaAuth, { \n    res, \n    accessToken\n  });\n}\n/* eslint-enable complexity */\n\nexport type GenerateRequestFnFromLinksOptions = {\n  oktaAuth: OktaAuthOAuthInterface;\n  accessToken: string;\n  methodName: string;\n  links: TransactionLinks;\n  transactionClassName?: string;\n}\n\ntype IRequestFnFromLinks = <T extends BaseTransaction>(payload?) => Promise<T | T[]>;\n\nexport function generateRequestFnFromLinks ({\n  oktaAuth, \n  accessToken,\n  methodName,\n  links,\n  transactionClassName\n}: GenerateRequestFnFromLinksOptions): IRequestFnFromLinks {\n  for (const method of ['GET', 'POST', 'PUT', 'DELETE']) {\n    if (method.toLowerCase() === methodName) {\n      const link = links.self;\n      return (async (payload?) => sendRequest(oktaAuth, {\n        accessToken,\n        url: link.href,\n        method,\n        payload,\n        transactionClassName\n      }));\n    }\n  }\n  \n  const link = links[methodName];\n  if (!link) {\n    throw new AuthSdkError(`No link is found with methodName: ${methodName}`);\n  }\n\n  return (async (payload?) => sendRequest(oktaAuth, {\n    accessToken,\n    url: link.href,\n    method: link.hints!.allow![0],\n    payload,\n    transactionClassName\n  }));\n}\n"],"mappings":"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"}