{"version":3,"file":"PhoneTransaction.js","names":["PhoneTransaction","BaseTransaction","constructor","oktaAuth","options","res","accessToken","id","profile","status","_links","get","fn","generateRequestFnFromLinks","methodName","links","transactionClassName","delete","challenge","payload","verify"],"sources":["../../../../lib/myaccount/transactions/PhoneTransaction.ts"],"sourcesContent":["import { ChallengePhonePayload, PhoneProfile, Status, VerificationPayload } from '../types';\nimport BaseTransaction from './Base';\nimport { generateRequestFnFromLinks } from '../request';\n\nexport default class PhoneTransaction extends BaseTransaction {\n  id: string;\n  profile: PhoneProfile;\n  status: Status;\n\n  // eslint-disable-next-line no-use-before-define\n  get: () => Promise<PhoneTransaction>;\n  delete: () => Promise<BaseTransaction>;\n  challenge: (payload: ChallengePhonePayload) => Promise<BaseTransaction>;\n  verify?: (payload: VerificationPayload) => Promise<BaseTransaction>;\n\n  constructor(oktaAuth, options) {\n    super(oktaAuth, options);\n\n    const { res, accessToken } = options;\n    // assign required fields from res\n    const { id, profile, status, _links } = res;\n    this.id = id;\n    this.profile = profile;\n    this.status = status;\n\n    // assign transformed fns to transaction\n    this.get = async () => {\n      const fn = generateRequestFnFromLinks({ \n        oktaAuth, \n        accessToken, \n        methodName: 'get', \n        links: _links,\n        transactionClassName: 'PhoneTransaction'\n      });\n      return await fn() as PhoneTransaction;\n    };\n    this.delete = async () => {\n      const fn = generateRequestFnFromLinks({ \n        oktaAuth, \n        accessToken, \n        methodName: 'delete', \n        links: _links \n      });\n      return await fn() as BaseTransaction;\n    };\n    this.challenge = async (payload) => {\n      const fn = generateRequestFnFromLinks({ \n        oktaAuth, \n        accessToken, \n        methodName: 'challenge', \n        links: _links \n      });\n      return await fn(payload) as BaseTransaction;\n    };\n    if (_links.verify) {\n      this.verify = async (payload) => {\n        const fn = generateRequestFnFromLinks({ \n          oktaAuth, \n          accessToken, \n          methodName: 'verify', \n          links: _links \n        });\n        return await fn(payload) as BaseTransaction;\n      } ;\n    }\n  }\n}\n"],"mappings":";;;;AACA;AACA;AAEe,MAAMA,gBAAgB,SAASC,aAAe,CAAC;EAK5D;;EAMAC,WAAW,CAACC,QAAQ,EAAEC,OAAO,EAAE;IAC7B,KAAK,CAACD,QAAQ,EAAEC,OAAO,CAAC;IAExB,MAAM;MAAEC,GAAG;MAAEC;IAAY,CAAC,GAAGF,OAAO;IACpC;IACA,MAAM;MAAEG,EAAE;MAAEC,OAAO;MAAEC,MAAM;MAAEC;IAAO,CAAC,GAAGL,GAAG;IAC3C,IAAI,CAACE,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;;IAEpB;IACA,IAAI,CAACE,GAAG,GAAG,YAAY;MACrB,MAAMC,EAAE,GAAG,IAAAC,mCAA0B,EAAC;QACpCV,QAAQ;QACRG,WAAW;QACXQ,UAAU,EAAE,KAAK;QACjBC,KAAK,EAAEL,MAAM;QACbM,oBAAoB,EAAE;MACxB,CAAC,CAAC;MACF,OAAO,MAAMJ,EAAE,EAAE;IACnB,CAAC;IACD,IAAI,CAACK,MAAM,GAAG,YAAY;MACxB,MAAML,EAAE,GAAG,IAAAC,mCAA0B,EAAC;QACpCV,QAAQ;QACRG,WAAW;QACXQ,UAAU,EAAE,QAAQ;QACpBC,KAAK,EAAEL;MACT,CAAC,CAAC;MACF,OAAO,MAAME,EAAE,EAAE;IACnB,CAAC;IACD,IAAI,CAACM,SAAS,GAAG,MAAOC,OAAO,IAAK;MAClC,MAAMP,EAAE,GAAG,IAAAC,mCAA0B,EAAC;QACpCV,QAAQ;QACRG,WAAW;QACXQ,UAAU,EAAE,WAAW;QACvBC,KAAK,EAAEL;MACT,CAAC,CAAC;MACF,OAAO,MAAME,EAAE,CAACO,OAAO,CAAC;IAC1B,CAAC;IACD,IAAIT,MAAM,CAACU,MAAM,EAAE;MACjB,IAAI,CAACA,MAAM,GAAG,MAAOD,OAAO,IAAK;QAC/B,MAAMP,EAAE,GAAG,IAAAC,mCAA0B,EAAC;UACpCV,QAAQ;UACRG,WAAW;UACXQ,UAAU,EAAE,QAAQ;UACpBC,KAAK,EAAEL;QACT,CAAC,CAAC;QACF,OAAO,MAAME,EAAE,CAACO,OAAO,CAAC;MAC1B,CAAC;IACH;EACF;AACF;AAAC;AAAA"}