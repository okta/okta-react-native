{"version":3,"file":"mixin.js","names":["mixinMyAccount","Base","OktaAuthMyAccount","constructor","args","myaccount","Object","entries","MyAccountMethods","filter","name","reduce","acc","fn","bind"],"sources":["../../../lib/myaccount/mixin.ts"],"sourcesContent":["import { OktaAuthConstructor } from '../base/types';\nimport {\n  OAuthStorageManagerInterface,\n  OAuthTransactionMeta,\n  OktaAuthOAuthInterface,\n  OktaAuthOAuthOptions,\n  PKCETransactionMeta,\n} from '../oidc/types';\nimport { OktaAuthMyAccountInterface } from './types';\n\nimport * as MyAccountMethods from './api';\n\nexport function mixinMyAccount\n<\n  M extends OAuthTransactionMeta = PKCETransactionMeta,\n  S extends OAuthStorageManagerInterface<M> = OAuthStorageManagerInterface<M>,\n  O extends OktaAuthOAuthOptions = OktaAuthOAuthOptions,\n  TBase extends OktaAuthConstructor<OktaAuthOAuthInterface<M, S, O>>\n    = OktaAuthConstructor<OktaAuthOAuthInterface<M, S, O>>\n>\n(Base: TBase): TBase & OktaAuthConstructor<OktaAuthMyAccountInterface<M, S, O>>\n{\n  return class OktaAuthMyAccount extends Base implements OktaAuthMyAccountInterface<M, S, O>\n  {\n    myaccount: any;\n    \n    constructor(...args: any[]) {\n      super(...args);\n\n      this.myaccount = Object.entries(MyAccountMethods)\n        .filter(([ name ]) => name !== 'default')\n        .reduce((acc, [name, fn]) => {\n          acc[name] = (fn as any).bind(null, this);\n          return acc;\n        }, {});\n    }\n  };\n}\n"],"mappings":";;;AAUA;AAA0C;AAAA;AAEnC,SAASA,cAAc,CAQ7BC,IAAW,EACZ;EACE,OAAO,MAAMC,iBAAiB,SAASD,IAAI,CAC3C;IAGEE,WAAW,CAAC,GAAGC,IAAW,EAAE;MAC1B,KAAK,CAAC,GAAGA,IAAI,CAAC;MAEd,IAAI,CAACC,SAAS,GAAGC,MAAM,CAACC,OAAO,CAACC,gBAAgB,CAAC,CAC9CC,MAAM,CAAC,CAAC,CAAEC,IAAI,CAAE,KAAKA,IAAI,KAAK,SAAS,CAAC,CACxCC,MAAM,CAAC,CAACC,GAAG,EAAE,CAACF,IAAI,EAAEG,EAAE,CAAC,KAAK;QAC3BD,GAAG,CAACF,IAAI,CAAC,GAAIG,EAAE,CAASC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;QACxC,OAAOF,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IACV;EACF,CAAC;AACH"}